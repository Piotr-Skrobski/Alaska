services:
  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    hostname: my-rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    restart: unless-stopped
    networks:
      - alaska_network
      - message_broker_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    command: [--auth, --wiredTigerCacheSizeGB, "1", --bind_ip_all]
    networks:
      - alaska_network
      - mongodb_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "27018:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
      - ME_CONFIG_SITE_SSL_ENABLED=false
      - ME_CONFIG_MONGODB_SSL=false
    depends_on:
      mongodb:
        condition: service_healthy
        restart: true
    networks:
      - alaska_network
      - mongodb_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    command: postgres -c ssl=on -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    networks:
      - alaska_network
      - postgres_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    ports:
      - "5433:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - alaska_network
      - postgres_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - alaska_network
      - redis_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  gateway:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "${GATEWAY_PORT}:8080"
    networks:
      - alaska_network
    depends_on:
      movie-service:
        condition: service_started
      user-service:
        condition: service_started
      review-service:
        condition: service_started
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  movie-service:
    build:
      context: .
      dockerfile: movie-service/Dockerfile
    container_name: movie-service
    ports:
      - "${MOVIE_SERVICE_PORT}:10002"
    environment:
      - MONGO_URI=${MONGO_URI}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - OMDB_API_KEY=${OMDB_API_KEY}
      - PORT=${PORT}
    depends_on:
      mongodb:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
    networks:
      - alaska_network
      - mongodb_network
      - message_broker_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "http://localhost:10002/movies/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    ports:
      - "${USER_SERVICE_PORT}:10002"
    environment:
      - POSTGRES_URI=${POSTGRES_URL}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URI=${REDIS_URI}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - PORT=${PORT}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    networks:
      - alaska_network
      - postgres_network
      - redis_network
      - message_broker_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "http://localhost:10002/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  review-service:
    build:
      context: .
      dockerfile: review-service/Dockerfile
    container_name: review-service
    ports:
      - "${REVIEW_SERVICE_PORT}:10002"
    environment:
      - POSTGRES_URI=${POSTGRES_URL}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - PORT=${PORT}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true
    networks:
      - alaska_network
      - postgres_network
      - message_broker_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "http://localhost:10002/reviews/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "8081:80"
    depends_on:
      gateway:
        condition: service_started
        restart: true
    networks:
      - alaska_network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 256M

  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama-entrypoint.sh:/ollama-entrypoint.sh
    restart: unless-stopped
    entrypoint: ["/usr/bin/bash", "/ollama-entrypoint.sh"]
    networks:
      - alaska_network

networks:
  alaska_network:
  message_broker_network:
    driver: bridge
    internal: true
  mongodb_network:
    driver: bridge
    internal: true
  postgres_network:
    driver: bridge
    internal: true
  redis_network:
    driver: bridge
    internal: true

volumes:
  rabbitmq_data:
  rabbitmq_logs:
  mongodb_data:
  postgres_data:
  pgadmin_data:
  redis_data:
  ollama_data:
